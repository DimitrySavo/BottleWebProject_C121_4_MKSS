import unittest
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from models.Graph import Graph

class ComplementTest(unittest.TestCase):
    def test_complement_for_empty_graph(self):
        small_graph = Graph(1)
        big_graph = Graph(8)
        max_graph = Graph(10)

        small_graph.add_edges_from([])
        big_graph.add_edges_from([])
        max_graph.add_edges_from([])

        complement = Graph.complement(small_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [[0, 0]])

        complement = Graph.complement(big_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [7, 0], [7, 1], [7, 2], [7,3],[7,4],[7,5],[7,6],[7,7]])

        complement = Graph.complement(max_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5,9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]])

    def test_complement_for_full_graph(self):
        small_graph = Graph(1)
        big_graph = Graph(8)
        max_graph = Graph(10)

        small_graph.add_edges_from([[0, 0]])
        big_graph.add_edges_from( [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [7, 0], [7, 1], [7, 2], [7,3],[7,4],[7,5],[7,6],[7,7]])
        max_graph.add_edges_from([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5,9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]])

        complement = Graph.complement(small_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [])

        complement = Graph.complement(big_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [])

        complement = Graph.complement(max_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [])

    def test_complement_for_not_full_not_empty_graph(self):
        big_graph = Graph(8)
        max_graph = Graph(10)

        big_graph.add_edges_from([[0, 0], [0, 1], [1, 0], [1, 1], [1, 3], [1, 5], [2, 4], [2, 5], [3, 1], [3, 5], [3, 6], [3, 7], [4, 2], [4, 4], [4, 5], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [6, 3], [6, 5], [7, 3], [7, 7]])
        max_graph.add_edges_from([[0,1],[1,0], [1,1],[1,8],[1,9], [2,3],[2,8],[2,9], [3,1],[3,2], [3,5], [3,6], [3,7], [3,8],[3,9],[5,9], [4,1], [4,3], [4,5], [4,6], [4,7],[5,3], [6,3], [7,3], [7,8], [8,1], [8,2],[8,3], [8,7], [9,1], [9,2], [9,3], [9,5]])

        complement = Graph.complement(big_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [[0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 2], [1, 4], [1, 6], [1, 7], [2, 0], [2, 1], [2, 2], [2, 3], [2, 6], [2, 7], [3, 0], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 3], [4, 6], [4, 7], [5, 0], [5, 7], [6, 0], [6, 1], [6, 2], [6, 4], [6, 6], [6, 7], [7, 0], [7, 1], [7, 2], [7, 4], [7, 5], [7, 6]])

        complement = Graph.complement(max_graph)
        edges = complement.get_edges()
        self.assertEqual(edges, [[0, 0], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 2], [1, 5], [1, 6], [1, 7], [2, 0], [2, 1], [2, 2], [2, 4], [2, 5], [2, 6], [2, 7], [3, 0], [3, 3], [4, 0], [4, 2], [4, 4], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 5], [7, 6], [7, 7], [7, 9], [8, 0], [8, 4], [8, 5], [8, 6], [8, 8], [8, 9], [9, 0], [9, 4], [9, 6], [9, 7], [9,8], [9,9]])
if __name__ == '__main__':
    unittest.main()